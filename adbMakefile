# Copyright (C) 2018 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Define toolchain
TOOLCHAIN ?= /root/openwrt-sdk-x86-64_gcc-14.3.0_musl.Linux-x86_64/staging_dir/toolchain-x86_64_gcc-14.3.0_musl/bin/x86_64-openwrt-linux-musl-
CC = $(TOOLCHAIN)gcc
CXX = $(TOOLCHAIN)g++
LD = $(TOOLCHAIN)g++

# Host OS detection
HOST_OS := $(shell uname -s | tr '[:upper:]' '[:lower:]')

# Source files for libfastboot
LIBFASTBOOT_SRCS := \
    bootimg_utils.cpp \
    fastboot_driver.cpp \
    fastboot.cpp \
    filesystem.cpp \
    fs.cpp \
    socket.cpp \
    storage.cpp \
    super_flash_helper.cpp \
    tcp.cpp \
    udp.cpp \
    util.cpp \
    vendor_boot_img_utils.cpp \
    task.cpp

# Platform-specific source files
ifeq ($(HOST_OS),linux)
    LIBFASTBOOT_SRCS += usb_linux.cpp
endif
ifeq ($(HOST_OS),darwin)
    LIBFASTBOOT_SRCS += usb_osx.cpp
endif
ifeq ($(HOST_OS),windows)
    LIBFASTBOOT_SRCS += usb_windows.cpp
endif

# Source files for fastboot binary
FASTBOOT_SRCS := main.cpp

# Source files for fastboot_test
FASTBOOT_TEST_SRCS := \
    fastboot_driver_test.cpp \
    fastboot_test.cpp \
    socket_mock.cpp \
    socket_test.cpp \
    super_flash_helper_test.cpp \
    task_test.cpp \
    tcp_test.cpp \
    udp_test.cpp

# Source files for fastboot_vendor_boot_img_utils_test
VENDOR_BOOT_TEST_SRCS := vendor_boot_img_utils_test.cpp

# Object files
LIBFASTBOOT_OBJS := $(LIBFASTBOOT_SRCS:.cpp=.o)
FASTBOOT_OBJS := $(FASTBOOT_SRCS:.cpp=.o)
FASTBOOT_TEST_OBJS := $(FASTBOOT_TEST_SRCS:.cpp=.o)
VENDOR_BOOT_TEST_OBJS := $(VENDOR_BOOT_TEST_SRCS:.cpp=.o)

# Compiler flags
CFLAGS := -O2 -g -Wall -Wextra -Werror -Wunreachable-code -DANDROID_BASE_UNIQUE_FD_DISABLE_IMPLICIT_CONVERSION -D_FILE_OFFSET_BITS=64
CXXFLAGS := $(CFLAGS) -std=c++11
ifeq ($(HOST_OS),darwin)
    CFLAGS += -Wno-unused-parameter
endif

# Include directories
INCLUDE_DIRS := \
    . \
    include \
    ../libsparse/include \
    ../../extras/ext4_utils \
    ../../../external/zlib \
    ../../../external/openssl/include \
    ../../../external/libselinux/include \
    avb_headers \
    bootimg_headers \
    libstorage_literals_headers

# Convert include directories to -I flags
CPPFLAGS += $(addprefix -I, $(INCLUDE_DIRS))

# Static libraries
STATIC_LIBS := \
    libziparchive \
    libsparse \
    libutils \
    liblog \
    liblz4 \
    libz \
    libdiagnose_usb \
    libbase \
    libcutils \
    liblp \
    libcrypto \
    libbuildversion

ifeq ($(HOST_OS),linux)
    STATIC_LIBS += libext4_utils
endif

# Platform-specific linker flags
ifeq ($(HOST_OS),linux)
    LDFLAGS := -ldl -rdynamic -Wl,-rpath,.
endif
ifeq ($(HOST_OS),darwin)
    LDFLAGS := -lpthread -framework CoreFoundation -framework IOKit
endif
ifeq ($(HOST_OS),windows)
    LDFLAGS := -lws2_32
    STATIC_LIBS += AdbWinApi
    INCLUDE_DIRS += development/host/windows/usb/api
endif

# Linker libraries
LIBS := $(addprefix -l, $(STATIC_LIBS))

# Targets
all: fastboot libfastboot.a fastboot_test fastboot_vendor_boot_img_utils_test

# Build libfastboot static library
libfastboot.a: $(LIBFASTBOOT_OBJS)
	$(AR) rcs $@ $^

# Build fastboot binary
fastboot: $(FASTBOOT_OBJS) libfastboot.a
	$(LD) -o $@ $(FASTBOOT_OBJS) libfastboot.a $(LDFLAGS) $(LIBS)

# Build fastboot_test
fastboot_test: $(FASTBOOT_TEST_OBJS) libfastboot.a
	$(LD) -o $@ $(FASTBOOT_TEST_OBJS) libfastboot.a -lgmock $(LDFLAGS) $(LIBS)

# Build fastboot_vendor_boot_img_utils_test
fastboot_vendor_boot_img_utils_test: $(VENDOR_BOOT_TEST_OBJS) libfastboot.a
	$(LD) -o $@ $(VENDOR_BOOT_TEST_OBJS) libfastboot.a -lgmock -lbase -llog $(LDFLAGS) $(LIBS)

# Compile C++ source files
%.o: %.cpp
	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c $< -o $@

# Clean
clean:
	rm -f $(LIBFASTBOOT_OBJS) $(FASTBOOT_OBJS) $(FASTBOOT_TEST_OBJS) $(VENDOR_BOOT_TEST_OBJS) libfastboot.a fastboot fastboot_test fastboot_vendor_boot_img_utils_test

# Dist files
dist: fastboot
	cp fastboot $(DIST_DIR)/

# Phony targets
.PHONY: all clean dist